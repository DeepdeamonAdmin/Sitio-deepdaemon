{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\SitioDeepDaemon\\\\Sitio-deepdaemon\\\\src\\\\routers\\\\AppRouter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { firebase } from '../firebase/firebase-config'; //uso de rutas e\n\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\nimport { login } from '../actions/auth'; //rutas sitio publico\n\nimport { DashboardRouters } from './DashboardRouters'; //rutas para sitio de administración\n\nimport { AdminDashBoard } from './AdminDashBoard'; //componente para auth\n\nimport { Login } from '../componentes/Admin/Login'; //proteccion de rutas\n\nimport { PrivateRoute } from './PrivateRoute';\nimport { PublicRoute } from './PublicRoute';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppRouter = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [checking, setChecking] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user === null || user === void 0 ? void 0 : user.uid) {\n        dispatch(login(user.uid, user.displayName));\n        setIsLoggedIn(true);\n      } else {\n        setIsLoggedIn(false);\n      }\n\n      setChecking(false);\n    });\n  }, [dispatch, setChecking, setIsLoggedIn]);\n\n  if (checking) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Espere...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(PublicRoute, {\n          exact: true,\n          path: \"/login\",\n          component: Login,\n          isAuthenticated: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n          path: \"/Admin\",\n          component: AdminDashBoard,\n          isAuthenticated: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PublicRoute, {\n          path: \"/\",\n          component: DashboardRouters,\n          isAuthenticated: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppRouter, \"Us3laKkdPH+BnHBeC5IElNO1lrY=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AppRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"sources":["C:/Users/Alan/Desktop/SitioDeepDaemon/Sitio-deepdaemon/src/routers/AppRouter.js"],"names":["React","useEffect","useState","useDispatch","firebase","BrowserRouter","Router","Switch","Redirect","login","DashboardRouters","AdminDashBoard","Login","PrivateRoute","PublicRoute","AppRouter","dispatch","checking","setChecking","isLoggedIn","setIsLoggedIn","auth","onAuthStateChanged","user","uid","displayName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,6BAAzB,C,CACA;;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,MAFJ,EAGIC,QAHJ,QAIS,kBAJT;AAOA,SAASC,KAAT,QAAsB,iBAAtB,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,oBAAjC,C,CAEA;;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;;AACA,SAASC,KAAT,QAAsB,4BAAtB,C,CAEA;;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAKA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAE3B,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEA,QAAM,CAAEc,QAAF,EAAYC,WAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAAEiB,UAAF,EAAcC,aAAd,IAAgClB,QAAQ,CAAC,KAAD,CAA9C;AAGAD,EAAAA,SAAS,CAAC,MAAM;AAEZG,IAAAA,QAAQ,CAACiB,IAAT,GAAgBC,kBAAhB,CAAqCC,IAAD,IAAU;AAE1C,UAAKA,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEC,GAAX,EAAiB;AACbR,QAAAA,QAAQ,CAAEP,KAAK,CAAEc,IAAI,CAACC,GAAP,EAAYD,IAAI,CAACE,WAAjB,CAAP,CAAR;AACAL,QAAAA,aAAa,CAAE,IAAF,CAAb;AACH,OAHD,MAGO;AACHA,QAAAA,aAAa,CAAE,KAAF,CAAb;AACH;;AAEDF,MAAAA,WAAW,CAAC,KAAD,CAAX;AAEH,KAXD;AAaH,GAfQ,EAeN,CAAEF,QAAF,EAAYE,WAAZ,EAAyBE,aAAzB,CAfM,CAAT;;AAkBA,MAAKH,QAAL,EAAgB;AACZ,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAGA,sBACG,QAAC,MAAD;AAAA,2BACI;AAAA,6BACQ,QAAC,MAAD;AAAA,gCACI,QAAC,WAAD;AACI,UAAA,KAAK,MADT;AAEI,UAAA,IAAI,EAAC,QAFT;AAGI,UAAA,SAAS,EAAGL,KAHhB;AAII,UAAA,eAAe,EAAGO;AAJtB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI,QAAC,YAAD;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,SAAS,EAAGR,cAFhB;AAGI,UAAA,eAAe,EAAGQ;AAHtB;AAAA;AAAA;AAAA;AAAA,gBANJ,eAWI,QAAC,WAAD;AACI,UAAA,IAAI,EAAC,GADT;AAEI,UAAA,SAAS,EAAGT,gBAFhB;AAGI,UAAA,eAAe,EAAGS;AAHtB;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAeI,QAAC,QAAD;AAAU,UAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADH;AAwBJ,CAzDM;;GAAMJ,S;UAEQZ,W;;;KAFRY,S","sourcesContent":["import React, { useEffect, useState }from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { firebase } from '../firebase/firebase-config'\r\n//uso de rutas e\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect\r\n  } from 'react-router-dom';\r\n\r\n\r\nimport { login } from '../actions/auth';\r\n\r\n//rutas sitio publico\r\nimport { DashboardRouters } from './DashboardRouters';\r\n\r\n//rutas para sitio de administración\r\nimport { AdminDashBoard } from './AdminDashBoard';\r\n\r\n//componente para auth\r\nimport { Login } from '../componentes/Admin/Login';\r\n\r\n//proteccion de rutas\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\n\r\n\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [ checking, setChecking ] = useState(true);\r\n    const [ isLoggedIn, setIsLoggedIn ] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        firebase.auth().onAuthStateChanged( (user) => {\r\n\r\n            if ( user?.uid ) {\r\n                dispatch( login( user.uid, user.displayName ) );\r\n                setIsLoggedIn( true );\r\n            } else {\r\n                setIsLoggedIn( false );\r\n            }\r\n\r\n            setChecking(false);\r\n\r\n        });\r\n        \r\n    }, [ dispatch, setChecking, setIsLoggedIn ])\r\n\r\n\r\n    if ( checking ) {\r\n        return (\r\n            <h1>Espere...</h1>\r\n        )\r\n    }\r\n\r\n\r\n     return (\r\n        <Router>\r\n            <div>\r\n                    <Switch>\r\n                        <PublicRoute \r\n                            exact\r\n                            path=\"/login\" \r\n                            component={ Login }\r\n                            isAuthenticated={ isLoggedIn }  />\r\n                        <PrivateRoute \r\n                            path=\"/Admin\"\r\n                            component={ AdminDashBoard }\r\n                            isAuthenticated={ isLoggedIn } />       \r\n                       \r\n                        <PublicRoute \r\n                            path=\"/\" \r\n                            component={ DashboardRouters }\r\n                            isAuthenticated={ isLoggedIn } />\r\n                        <Redirect to='/'/>\r\n\r\n                    </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}